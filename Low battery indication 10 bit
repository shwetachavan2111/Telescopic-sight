/*
 * LED will glow continuously below 2V Analog  Input 
 * VCC      Vin      GND
 *  |        |        |
 *  +--[R1]--+--[R2]--+
 *
 * VCC = 3.3V
 * R1 = 2.2kOhm
 * R2 = 1kOhm
 * Vin(max) = VCC(max) * R2 / (R1 + R2) ~= 1.1V
 *
 * Pin configuration:
 * - LED Red -> PB1
 * - Vin -> PB4
 */


#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#define SAMPLES_NUM		(32)
#define LED_RED_PIN		PB1


static void Low_Battery_Indication(void);

volatile uint16_t samples_sum = 0;
volatile uint8_t samples_cnt = 0;

ISR(ADC_vect){
	uint8_t high, low;

	if (samples_cnt < SAMPLES_NUM) {
		low = ADCL;
		high = ADCH;
                samples_sum += (high << 8) | low;
		samples_cnt++;
		ADCSRA |= _BV(ADSC);
        }
}

int main(void){
	
	DDRB = _BV(LED_RED_PIN);						// Set LED pin PB1 as Output
	
	ADCSRA |= _BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);		// Set ADC division factor to 128;
	
	ADCSRA |= _BV(ADEN)|_BV(ADIE);					// Enable ADC and ADC Interrupt Enable
	
	ADMUX = _BV(MUX1)|_BV(REFS0);					// Set PB4 as Analog Input and use Internal Voltage Reference
	
	sei();											// Enable Global Interrupts

	ADCSRA |= _BV(ADSC);							// Start First Round of signal acquisition

	/* loop */
	while (1) {
		Low_Battery_Indication();
		_delay_ms(100);
	}
}

void Low_Battery_Indication(void)
{
	uint16_t ADC_Result;

	if (samples_cnt < SAMPLES_NUM) {
		return;
	}

	ADC_Result = samples_sum / (uint16_t)samples_cnt;      //Calculate Average
	samples_sum = samples_cnt = 0;
	
	PORTB &= ~(_BV(LED_RED_PIN));
	
	if (ADC_Result <= 700) {                              //Check whether calculated value is less than 700 or not
		PORTB |= _BV(LED_RED_PIN);                        //LED ON
	}
	else
	    PORTB &= ~(_BV(LED_RED_PIN));                     //LED OFF

	ADCSRA |= _BV(ADSC);                                  // Trigger Next Round of Signal Acquisition
}
